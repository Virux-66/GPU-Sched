digraph "CFG for 'main' function" {
	label="CFG for 'main' function";

	Node0x55f84619a160 [shape=record,label="{entry:\l  %retval = alloca i32, align 4\l  %argc.addr = alloca i32, align 4\l  %argv.addr = alloca i8**, align 8\l  %A = alloca [512 x float], align 16\l  %B = alloca [512 x float], align 16\l  %C = alloca [512 x float], align 16\l  %ThreadsPerBlock = alloca %struct.dim3, align 4\l  %BlocksPerGrid = alloca %struct.dim3, align 4\l  %size = alloca i64, align 8\l  %i = alloca i32, align 4\l  %d_A = alloca float*, align 8\l  %d_B = alloca float*, align 8\l  %d_C = alloca float*, align 8\l  %agg.tmp = alloca %struct.dim3, align 4\l  %agg.tmp14 = alloca %struct.dim3, align 4\l  %agg.tmp.coerce = alloca \{ i64, i32 \}, align 4\l  %agg.tmp14.coerce = alloca \{ i64, i32 \}, align 4\l  %agg.tmp27 = alloca %struct.dim3, align 4\l  %agg.tmp28 = alloca %struct.dim3, align 4\l  %agg.tmp27.coerce = alloca \{ i64, i32 \}, align 4\l  %agg.tmp28.coerce = alloca \{ i64, i32 \}, align 4\l  store i32 0, i32* %retval, align 4\l  store i32 %argc, i32* %argc.addr, align 4\l  store i8** %argv, i8*** %argv.addr, align 8\l  call void @_ZN4dim3C2Ejjj(%struct.dim3* %ThreadsPerBlock, i32 32, i32 1, i32\l... 1)\l  call void @_ZN4dim3C2Ejjj(%struct.dim3* %BlocksPerGrid, i32 16, i32 1, i32 1)\l  store i64 2048, i64* %size, align 8\l  store i32 0, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0x55f84619a160 -> Node0x55f84619b570;
	Node0x55f84619b570 [shape=record,label="{for.cond:                                         \l  %0 = load i32, i32* %i, align 4\l  %cmp = icmp slt i32 %0, 512\l  br i1 %cmp, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x55f84619b570:s0 -> Node0x55f84619ba40;
	Node0x55f84619b570:s1 -> Node0x55f84619bb20;
	Node0x55f84619ba40 [shape=record,label="{for.body:                                         \l  %1 = load i32, i32* %i, align 4\l  %call = call double\l... @_ZSt3sinIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeE\l...S2_(i32 %1)\l  %2 = load i32, i32* %i, align 4\l  %call1 = call double\l... @_ZSt3sinIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeE\l...S2_(i32 %2)\l  %mul = fmul double %call, %call1\l  %conv = fptrunc double %mul to float\l  %3 = load i32, i32* %i, align 4\l  %idxprom = sext i32 %3 to i64\l  %arrayidx = getelementptr inbounds [512 x float], [512 x float]* %A, i64 0,\l... i64 %idxprom\l  store float %conv, float* %arrayidx, align 4\l  %4 = load i32, i32* %i, align 4\l  %call2 = call double\l... @_ZSt3cosIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeE\l...S2_(i32 %4)\l  %5 = load i32, i32* %i, align 4\l  %call3 = call double\l... @_ZSt3cosIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeE\l...S2_(i32 %5)\l  %mul4 = fmul double %call2, %call3\l  %conv5 = fptrunc double %mul4 to float\l  %6 = load i32, i32* %i, align 4\l  %idxprom6 = sext i32 %6 to i64\l  %arrayidx7 = getelementptr inbounds [512 x float], [512 x float]* %B, i64 0,\l... i64 %idxprom6\l  store float %conv5, float* %arrayidx7, align 4\l  br label %for.inc\l}"];
	Node0x55f84619ba40 -> Node0x55f84619d5e0;
	Node0x55f84619d5e0 [shape=record,label="{for.inc:                                          \l  %7 = load i32, i32* %i, align 4\l  %inc = add nsw i32 %7, 1\l  store i32 %inc, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0x55f84619d5e0 -> Node0x55f84619b570;
	Node0x55f84619bb20 [shape=record,label="{for.end:                                          \l  %8 = load i64, i64* %size, align 8\l  %call8 = call i32 @_ZL10cudaMallocIfE9cudaErrorPPT_m(float** %d_A, i64 %8)\l  %9 = load i64, i64* %size, align 8\l  %call9 = call i32 @_ZL10cudaMallocIfE9cudaErrorPPT_m(float** %d_B, i64 %9)\l  %10 = load i64, i64* %size, align 8\l  %call10 = call i32 @_ZL10cudaMallocIfE9cudaErrorPPT_m(float** %d_C, i64 %10)\l  %11 = load float*, float** %d_A, align 8\l  %12 = bitcast float* %11 to i8*\l  %arraydecay = getelementptr inbounds [512 x float], [512 x float]* %A, i64\l... 0, i64 0\l  %13 = bitcast float* %arraydecay to i8*\l  %14 = load i64, i64* %size, align 8\l  %call11 = call i32 @cudaMemcpy(i8* %12, i8* %13, i64 %14, i32 1)\l  %15 = load float*, float** %d_B, align 8\l  %16 = bitcast float* %15 to i8*\l  %arraydecay12 = getelementptr inbounds [512 x float], [512 x float]* %B, i64\l... 0, i64 0\l  %17 = bitcast float* %arraydecay12 to i8*\l  %18 = load i64, i64* %size, align 8\l  %call13 = call i32 @cudaMemcpy(i8* %16, i8* %17, i64 %18, i32 1)\l  %19 = bitcast %struct.dim3* %agg.tmp to i8*\l  %20 = bitcast %struct.dim3* %BlocksPerGrid to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* align 4 %20, i64\l... 12, i1 false)\l  %21 = bitcast %struct.dim3* %agg.tmp14 to i8*\l  %22 = bitcast %struct.dim3* %ThreadsPerBlock to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 4 %22, i64\l... 12, i1 false)\l  %23 = bitcast \{ i64, i32 \}* %agg.tmp.coerce to i8*\l  %24 = bitcast %struct.dim3* %agg.tmp to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* align 4 %24, i64\l... 12, i1 false)\l  %25 = getelementptr inbounds \{ i64, i32 \}, \{ i64, i32 \}* %agg.tmp.coerce,\l... i32 0, i32 0\l  %26 = load i64, i64* %25, align 4\l  %27 = getelementptr inbounds \{ i64, i32 \}, \{ i64, i32 \}* %agg.tmp.coerce,\l... i32 0, i32 1\l  %28 = load i32, i32* %27, align 4\l  %29 = bitcast \{ i64, i32 \}* %agg.tmp14.coerce to i8*\l  %30 = bitcast %struct.dim3* %agg.tmp14 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %29, i8* align 4 %30, i64\l... 12, i1 false)\l  %31 = getelementptr inbounds \{ i64, i32 \}, \{ i64, i32 \}* %agg.tmp14.coerce,\l... i32 0, i32 0\l  %32 = load i64, i64* %31, align 4\l  %33 = getelementptr inbounds \{ i64, i32 \}, \{ i64, i32 \}* %agg.tmp14.coerce,\l... i32 0, i32 1\l  %34 = load i32, i32* %33, align 4\l  %call15 = call i32 @__cudaPushCallConfiguration(i64 %26, i32 %28, i64 %32,\l... i32 %34, i64 0, %struct.CUstream_st* null)\l  %tobool = icmp ne i32 %call15, 0\l  br i1 %tobool, label %cond.true, label %cond.false\l|{<s0>T|<s1>F}}"];
	Node0x55f84619bb20:s0 -> Node0x55f8461a0350;
	Node0x55f84619bb20:s1 -> Node0x55f8461a0400;
	Node0x55f8461a0350 [shape=record,label="{cond.true:                                        \l  br label %cond.end\l}"];
	Node0x55f8461a0350 -> Node0x55f8461a0570;
	Node0x55f8461a0400 [shape=record,label="{cond.false:                                       \l  %35 = load float*, float** %d_A, align 8\l  %36 = load float*, float** %d_B, align 8\l  %37 = load float*, float** %d_C, align 8\l  call void @_Z6VecAddPfS_S_(float* %35, float* %36, float* %37)\l  br label %cond.end\l}"];
	Node0x55f8461a0400 -> Node0x55f8461a0570;
	Node0x55f8461a0570 [shape=record,label="{cond.end:                                         \l  %arraydecay16 = getelementptr inbounds [512 x float], [512 x float]* %C, i64\l... 0, i64 0\l  %38 = bitcast float* %arraydecay16 to i8*\l  %39 = load float*, float** %d_C, align 8\l  %40 = bitcast float* %39 to i8*\l  %41 = load i64, i64* %size, align 8\l  %call17 = call i32 @cudaMemcpy(i8* %38, i8* %40, i64 %41, i32 2)\l  %42 = load float*, float** %d_A, align 8\l  %43 = bitcast float* %42 to i8*\l  %call18 = call i32 @cudaFree(i8* %43)\l  %44 = load float*, float** %d_B, align 8\l  %45 = bitcast float* %44 to i8*\l  %call19 = call i32 @cudaFree(i8* %45)\l  %46 = load float*, float** %d_C, align 8\l  %47 = bitcast float* %46 to i8*\l  %call20 = call i32 @cudaFree(i8* %47)\l  %48 = load i64, i64* %size, align 8\l  %mul21 = mul i64 %48, 2\l  %call22 = call i32 @_ZL10cudaMallocIfE9cudaErrorPPT_m(float** %d_A, i64\l... %mul21)\l  %49 = load i64, i64* %size, align 8\l  %mul23 = mul i64 %49, 2\l  %call24 = call i32 @_ZL10cudaMallocIfE9cudaErrorPPT_m(float** %d_B, i64\l... %mul23)\l  %50 = load i64, i64* %size, align 8\l  %mul25 = mul i64 %50, 2\l  %call26 = call i32 @_ZL10cudaMallocIfE9cudaErrorPPT_m(float** %d_C, i64\l... %mul25)\l  %51 = bitcast %struct.dim3* %agg.tmp27 to i8*\l  %52 = bitcast %struct.dim3* %BlocksPerGrid to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %51, i8* align 4 %52, i64\l... 12, i1 false)\l  %53 = bitcast %struct.dim3* %agg.tmp28 to i8*\l  %54 = bitcast %struct.dim3* %ThreadsPerBlock to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %53, i8* align 4 %54, i64\l... 12, i1 false)\l  %55 = bitcast \{ i64, i32 \}* %agg.tmp27.coerce to i8*\l  %56 = bitcast %struct.dim3* %agg.tmp27 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %56, i64\l... 12, i1 false)\l  %57 = getelementptr inbounds \{ i64, i32 \}, \{ i64, i32 \}* %agg.tmp27.coerce,\l... i32 0, i32 0\l  %58 = load i64, i64* %57, align 4\l  %59 = getelementptr inbounds \{ i64, i32 \}, \{ i64, i32 \}* %agg.tmp27.coerce,\l... i32 0, i32 1\l  %60 = load i32, i32* %59, align 4\l  %61 = bitcast \{ i64, i32 \}* %agg.tmp28.coerce to i8*\l  %62 = bitcast %struct.dim3* %agg.tmp28 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %61, i8* align 4 %62, i64\l... 12, i1 false)\l  %63 = getelementptr inbounds \{ i64, i32 \}, \{ i64, i32 \}* %agg.tmp28.coerce,\l... i32 0, i32 0\l  %64 = load i64, i64* %63, align 4\l  %65 = getelementptr inbounds \{ i64, i32 \}, \{ i64, i32 \}* %agg.tmp28.coerce,\l... i32 0, i32 1\l  %66 = load i32, i32* %65, align 4\l  %call29 = call i32 @__cudaPushCallConfiguration(i64 %58, i32 %60, i64 %64,\l... i32 %66, i64 0, %struct.CUstream_st* null)\l  %tobool30 = icmp ne i32 %call29, 0\l  br i1 %tobool30, label %cond.true31, label %cond.false32\l|{<s0>T|<s1>F}}"];
	Node0x55f8461a0570:s0 -> Node0x55f8461a2790;
	Node0x55f8461a0570:s1 -> Node0x55f8461a2840;
	Node0x55f8461a2790 [shape=record,label="{cond.true31:                                      \l  br label %cond.end33\l}"];
	Node0x55f8461a2790 -> Node0x55f8461a29b0;
	Node0x55f8461a2840 [shape=record,label="{cond.false32:                                     \l  %67 = load float*, float** %d_A, align 8\l  %68 = load float*, float** %d_B, align 8\l  %69 = load float*, float** %d_C, align 8\l  call void @_Z6VecAddPfS_S_(float* %67, float* %68, float* %69)\l  br label %cond.end33\l}"];
	Node0x55f8461a2840 -> Node0x55f8461a29b0;
	Node0x55f8461a29b0 [shape=record,label="{cond.end33:                                       \l  %70 = load float*, float** %d_A, align 8\l  %71 = bitcast float* %70 to i8*\l  %call34 = call i32 @cudaFree(i8* %71)\l  %72 = load float*, float** %d_B, align 8\l  %73 = bitcast float* %72 to i8*\l  %call35 = call i32 @cudaFree(i8* %73)\l  %74 = load float*, float** %d_C, align 8\l  %75 = bitcast float* %74 to i8*\l  %call36 = call i32 @cudaFree(i8* %75)\l  ret i32 0\l}"];
}
